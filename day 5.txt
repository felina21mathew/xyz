CODE:
import random

class BlocksWorldProblem:
    def __init__(self, n_blocks):
        self.n_blocks = n_blocks
        self.state = list(range(1, n_blocks + 1))
        random.shuffle(self.state)

    def print_state(self):
        print("Current state:")
        print(self.state)

    def cost(self):
        # Cost function: number of blocks out of place
        return sum([self.state[i] != i + 1 for i in range(self.n_blocks)])

    def hill_climbing(self, max_iterations):
        for i in range(max_iterations):
            current_cost = self.cost()
            if current_cost == 0:
                print("Goal state reached!")
                return

            best_state = self.state[:]
            best_cost = current_cost

            for j in range(self.n_blocks):
                for k in range(j + 1, self.n_blocks):
                    new_state = self.state[:]
                    new_state[j], new_state[k] = new_state[k], new_state[j]
                    new_cost = sum([new_state[i] != i + 1 for i in range(self.n_blocks)])
                    if new_cost < best_cost:
                        best_state = new_state[:]
                        best_cost = new_cost

            if best_cost == current_cost:
                print("Local maximum reached!")
                return
            else:
                self.state = best_state[:]
                print("Iteration:", i + 1, "Cost:", best_cost)
                self.print_state()


n_blocks = 4
problem = BlocksWorldProblem(n_blocks)
print("Initial state:")
problem.print_state()
problem.hill_climbing(10)
 

OUTPUT:
Initial state:
Current state:
[3, 1, 2, 4]
Iteration: 1 Cost: 2
Current state:
[1, 3, 2, 4]
Iteration: 2 Cost: 0
Current state:
[1, 2, 3, 4]
Goal state reached!



              